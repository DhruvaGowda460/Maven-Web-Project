// Only Pipeline script

node
{
    
    def mavenHome = tool name:"maven3.8.6"
    properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])

    echo "The Job name is :${env.JOB_NAME}"
 stage('CheckoutCode'){
    git credentialsId: 'a4c28f7a-cfcc-44f7-9a68-ee2e46dee83a', url: 'https://github.com/MVKtechnologies/maven-web-application.git'
 }  
 
 stage('Build'){
     sh "${mavenHome}/bin/mvn clean package"
 }
 
 stage ('Execute sonarQube Report'){
sh "${mavenHome}/bin/mvn sonar:sonar"
}

stage ('Nexus - Upload artifacts'){
sh "${mavenHome}/bin/mvn deploy"
}

stage('Deploy App into Tomcat server') {
    sshagent(['e26b4baa-b1b5-4b2e-95fa-d3c5e6ca7896']){
    sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@13.233.183.122:/opt/apache-tomcat-9.0.70/webapps/"
    }
}
 
}

// Pipeline script with Slack Notifications
/*
node{

 def mavenHome = tool name:"maven3.8.6"
    properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])

    echo "The Job name is :${env.JOB_NAME}"
  try{  
  slackNotifications('STARTED')  
 stage('CheckoutCode'){
    git credentialsId: 'a4c28f7a-cfcc-44f7-9a68-ee2e46dee83a', url: 'https://github.com/MVKtechnologies/maven-web-application.git'
 }  
 
 stage('Build'){
     sh "${mavenHome}/bin/mvn clean package"
 }
 
 stage ('Execute sonarQube Report'){
sh "${mavenHome}/bin/mvn sonar:sonar"
}

stage ('Nexus - Upload artifacts'){
sh "${mavenHome}/bin/mvn deploy"
}

stage('Deploy App into Tomcat server') {
    sshagent(['e26b4baa-b1b5-4b2e-95fa-d3c5e6ca7896']){
    sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@13.233.183.122:/opt/apache-tomcat-9.0.70/webapps/"
    }
}
  
  }//try closing
  catch(e){
  currentBuild.result="FAILURE"
  throw e
  }//catch closing
  finally{
  slackNotifications(currentBuild.result)
  }
} //Node closing
*/

//Code Snippet for sending slack notifications.

def slackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'
  //buildStatus = buildStatus ? "SUCCESS":"FAILURE"

  // Default values
 // def colorName = 'RED'
  //def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    colorName = 'ORANGE'
    colorCode = '#FFA500'
  } else if (buildStatus == 'SUCCESS') {
    colorName = 'GREEN'
    colorCode = '#00FF00'
  } else {
    colorName = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}
